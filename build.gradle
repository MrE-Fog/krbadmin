group 'pl.memleak'
version '0.0.3'

apply plugin: 'java'
apply plugin: 'c'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'publishing'

def ossrhUsername = hasProperty('ossrhUsername') ? ossrhUsername : ''
def ossrhPassword = hasProperty('ossrhPassword') ? ossrhPassword : ''

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

if(!hasProperty('jvmIncludePath') || !hasProperty('jvmPlatformIncludePath'))
    throw new InvalidUserDataException('jvmIncludePath and/or jvmPlatformIncludePath not ' +
            'specified in gradle.properties (see gradle.properties.example).\n' +
            'Set jvmIncludePath to a directory containing \'jni.h\' (typically: ' +
            '/usr/lib/jvm/*/include) and jvmPlatformIncludePath to \'jni_md.h\' location ' +
            '(typically: /usr/lib/jvm/*/include/linux).')

model {
    components {
        kadm5_jni(NativeLibrarySpec) {
            baseName name + '-' + version
            sources {
                c
            }
            binaries {
                withType(SharedLibraryBinarySpec) {
                    cCompiler.args '-Wall', '-pedantic', '-Werror',
                    '-I' + jvmIncludePath, '-I' + jvmPlatformIncludePath
                    linker.args '-lkadm5clnt'
                }
                withType(StaticLibraryBinarySpec) {
                    buildable = false
                }
            }
        }
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'KrbAdmin'
                groupId 'pl.memleak'
                packaging 'jar'
                description 'Kerberos Administration Protocol library'
                url 'https://gitlab.memleak.pl/memleak/krbadmin'

                scm {
                    connection 'scm:git@gitlab.memleak.pl:memleak/krbadmin.git'
                    developerConnection 'scm:git@gitlab.memleak.pl:memleak/krbadmin.git'
                    url 'https://gitlab.memleak.pl/memleak/krbadmin'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        name 'Marcin Moskal'
                        email 'mmos@memleak.pl'
                    }
                }
            }
        }
    }
}